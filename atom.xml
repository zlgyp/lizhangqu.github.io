<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[区长的博客]]></title>
  <subtitle><![CDATA[业精于勤，荒于嬉；行成于思，毁于随]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lizhangqu.com/"/>
  <updated>2015-11-26T04:12:29.765Z</updated>
  <id>http://lizhangqu.com/</id>
  
  <author>
    <name><![CDATA[Li Zhangqu]]></name>
    <email><![CDATA[513163535@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lizhangqu.com/2015/11/27/hello-world/"/>
    <id>http://lizhangqu.com/2015/11/27/hello-world/</id>
    <published>2015-11-26T16:00:00.000Z</published>
    <updated>2015-11-26T04:12:29.765Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[how to install hexo]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://lizhangqu.com/tags/Hexo/"/>
    
      <category term="install" scheme="http://lizhangqu.com/tags/install/"/>
    
      <category term="Hexo" scheme="http://lizhangqu.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发中常见的设计模式]]></title>
    <link href="http://lizhangqu.com/2015/11/26/Android-Design-Pattern/"/>
    <id>http://lizhangqu.com/2015/11/26/Android-Design-Pattern/</id>
    <published>2015-11-26T04:19:16.000Z</published>
    <updated>2015-11-26T04:37:00.407Z</updated>
    <content type="html"><![CDATA[<p>对于开发人员来说，设计模式有时候就是一道坎，但是设计模式又非常有用，过了这道坎，它可以让你水平提高一个档次。而在android开发中，必要的了解一些设计模式又是非常有必要的。对于想系统的学习设计模式的同学，这里推荐2本书。一本是Head First系列的Head Hirst Design Pattern，英文好的可以看英文，可以多读几遍。另外一本是大话设计模式。</p>
<h2 id="单例模式">单例模式</h2><p>首先了解一些单例模式的概念。</p>
<blockquote>
<p>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p>
</blockquote>
<p>这样做有以下几个优点</p>
<ul>
<li>对于那些比较耗内存的类，只实例化一次可以大大提高性能，尤其是在移动开发中。</li>
<li>保持程序运行的时候该中始终只有一个实例存在内存中</li>
</ul>
<p>其实单例有很多种实现方式，但是个人比较倾向于其中1种。可以见<a href="https://github.com/iluwatar/java-design-patterns/blob/master/singleton/src/main/java/com/iluwatar/singleton/ThreadSafeDoubleCheckLocking.java" target="_blank" rel="external">单例模式</a></p>
<p>代码如下<br><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> volatile Singleton<span class="instruction"> instance </span>= null;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span><span class="function"> Singleton(</span><span class="function">)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Singleton<span class="function"> getInstance(</span><span class="function">)</span> &#123;</span><br><span class="line">       <span class="instruction"> if </span>(instance == null<span class="function">)</span> &#123;</span><br><span class="line">            synchronized<span class="function"> (</span>Singleton.class<span class="function">)</span> &#123;</span><br><span class="line">               <span class="instruction"> if </span>(instance == null<span class="function">)</span> &#123;</span><br><span class="line">                   <span class="instruction"> instance </span>=<span class="instruction"> new </span>Singleton(<span class="function">)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="instruction"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要保证单例，需要做一下几步</p>
<ul>
<li>必须防止外部可以调用构造函数进行实例化，因此构造函数必须私有化。</li>
<li>必须定义一个静态函数获得该单例</li>
<li>单例使用volatile修饰</li>
<li>使用synchronized 进行同步处理，并且双重判断是否为null，我们看到synchronized (Singleton.class)里面又进行了是否为null的判断，这是因为一个线程进入了该代码，如果另一个线程在等待，这时候前一个线程创建了一个实例出来完毕后，另一个线程获得锁进入该同步代码，实例已经存在，没必要再次创建，因此这个判断是否是null还是必须的。</li>
</ul>
<p>至于单例的并发测试，可以使用CountDownLatch，使用await()等待锁释放，使用countDown()释放锁从而达到并发的效果。可以见下面的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	final CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> threadCount = <span class="number">1000</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">		<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">			@<span class="function">Override</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					latch.await();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Singleton.getInstance().hashCode());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line">	latch.countDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看看打印出来的hashCode会不会出现不一样即可，理论上是全部都一样的。</p>
<p>而在Android中，很多地方用到了单例。</p>
<p>比如Android-Universal-Image-Loader中的单例</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">private volatile<span class="keyword"> static</span> Image<span class="class">Loader instance;</span></span><br><span class="line">/** Returns singleton class<span class="instruction"> instance </span>*/<span class="keyword"></span><br><span class="line">public</span><span class="keyword"> static</span> ImageLoader<span class="function"> getInstance(</span><span class="function">)</span> &#123;</span><br><span class="line"><span class="instruction">	if </span>(instance == null<span class="function">)</span> &#123;</span><br><span class="line">		synchronized<span class="function"> (</span>ImageLoader.class<span class="function">)</span> &#123;</span><br><span class="line">		<span class="instruction">	if </span>(instance == null<span class="function">)</span> &#123;</span><br><span class="line">			<span class="instruction">	instance </span>=<span class="instruction"> new </span>ImageLoader(<span class="function">)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="instruction">	return </span>instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如EventBus中的单例</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">			<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">				defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> defaultInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的单例都是比较规规矩矩的，当然实际上有很多单例都是变了一个样子，单本质还是单例。</p>
<p>如InputMethodManager 中的单例</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> InputMethodManager sInstance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">InputMethodManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (InputMethodManager.class) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">			IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);</span><br><span class="line">			sInstance = <span class="keyword">new</span> InputMethodManager(service, Looper.getMainLooper());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sInstance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccessibilityManager 中的单例，看代码这么长，其实就是进行了一些判断，还是一个单例</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AccessibilityManager sInstance;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">AccessibilityManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (sInstanceSync) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">final</span> <span class="keyword">int</span> userId;</span><br><span class="line">			<span class="keyword">if</span> (Binder.getCallingUid() == Process.SYSTEM_UID</span><br><span class="line">					|| context.checkCallingOrSelfPermission(</span><br><span class="line">							Manifest.permission.INTERACT_ACROSS_USERS)</span><br><span class="line">									== PackageManager.PERMISSION_GRANTED</span><br><span class="line">					|| context.checkCallingOrSelfPermission(</span><br><span class="line">							Manifest.permission.INTERACT_ACROSS_USERS_FULL)</span><br><span class="line">									== PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">				userId = UserHandle.USER_CURRENT;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				userId = UserHandle.myUserId();</span><br><span class="line">			&#125;</span><br><span class="line">			IBinder iBinder = ServiceManager.getService(Context.ACCESSIBILITY_SERVICE);</span><br><span class="line">			IAccessibilityManager service = IAccessibilityManager.Stub.asInterface(iBinder);</span><br><span class="line">			sInstance = <span class="keyword">new</span> AccessibilityManager(context, service, userId);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然单例还有很多种写法，比如恶汉式，有兴趣的自己去了解就好了。</p>
<p>最后，我们应用一下单例模式。典型的一个应用就是管理我们的Activity，下面这个可以作为一个工具类，代码也很简单，也不做什么解释了。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ActivityManager</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> ActivityManager instance;</span><br><span class="line">	<span class="keyword">private</span> Stack&lt;Activity&gt; mActivityStack = <span class="keyword">new</span> Stack&lt;Activity&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ActivityManager</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ActivityManager <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">		synchronized (ActivityManager.class) &#123;</span><br><span class="line">			<span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">				instance = <span class="keyword">new</span> ActivityManager();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addActicity</span>(<span class="params">Activity act</span>)</span>&#123;</span><br><span class="line">		mActivityStack.push(act);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeActivity</span>(<span class="params">Activity act</span>)</span>&#123;</span><br><span class="line">		mActivityStack.remove(act);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killMyProcess</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> nCount = mActivityStack.size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = nCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        	Activity activity = mActivityStack.<span class="keyword">get</span>(i);</span><br><span class="line">        	activity.finish();</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		mActivityStack.clear();</span><br><span class="line">		android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类可以在开源中国的几个客户端中找到类似的源码</p>
<ul>
<li><p><a href="http://git.oschina.net/oschina/git-osc-android-project/blob/master/gitoscandroid/src/main/java/net/oschina/gitapp/AppManager.java?dir=0&amp;filepath=gitoscandroid%2Fsrc%2Fmain%2Fjava%2Fnet%2Foschina%2Fgitapp%2FAppManager.java&amp;oid=546475432f6f96677a9715c52308578d520b9fc6&amp;sha=1a9706c0913b0377d216c02f7cedda97e8a20dc1" target="_blank" rel="external">Git@OSC中的AppManager</a></p>
</li>
<li><p><a href="http://git.oschina.net/oschina/android-app/blob/master/app/src/main/java/net/oschina/app/AppManager.java?dir=0&amp;filepath=app%2Fsrc%2Fmain%2Fjava%2Fnet%2Foschina%2Fapp%2FAppManager.java&amp;oid=7e9bbd1811b0667792910fa6e4d88ea00d15bb8c&amp;sha=4e8eb3ebd6fab29aac26732027be95deaeec91de" target="_blank" rel="external">android-app中的AppManager</a></p>
</li>
</ul>
<p>以上两个类是一样的，没区别。</p>
<h2 id="Build模式">Build模式</h2><h2 id="观察者模式">观察者模式</h2><h2 id="原型模式">原型模式</h2><h2 id="策略模式">策略模式</h2>]]></content>
    <summary type="html">
    <![CDATA[设计模式在开发中尤其常见，要写出优良的可扩展的代码，设计模式显得尤其重要，在Android中，无论是系统还是开源框架，涉及到了大量的设计模式，掌握这些设计模式对能力的提升具有显著的作用]]>
    
    </summary>
    
      <category term="Android" scheme="http://lizhangqu.com/tags/Android/"/>
    
      <category term="Design Pattern" scheme="http://lizhangqu.com/tags/Design-Pattern/"/>
    
      <category term="安卓" scheme="http://lizhangqu.com/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="设计模式" scheme="http://lizhangqu.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="http://lizhangqu.com/categories/Android/"/>
    
  </entry>
  
</feed>
